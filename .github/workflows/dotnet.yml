name: .NET

on:
  #push:
  #   branches: [ "master" ]
  #pull_request:
  #  branches: [ "master" ]
  workflow_dispatch:
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Envionmental Info
        run: env

      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: GitHub Script
        run: echo ${GITHUB_WORKSPACE}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: GitHub Script
        run: echo ${GITHUB_WORKSPACE}

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Build Produced
        run: ls -la ${{github.workspace}}/bin/Debug/net6.0/

      - name: Compress Content
        #run: tar -czvf application.tar.gz --exclude=*.json ${{github.workspace}}/bin/Debug/net6.0/*.*
        run: |
          cd ${{github.workspace}}/bin/Debug/net6.0
          zip -r ${{github.workspace}}/application.zip . -x *.json

      - name: Verify Content
        run: echo ${GITHUB_WORKSPACE} | ls -la

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
            name: .net-app
            path: ${{github.workspace}}/application.zip
          
  sast_analysis:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Prepare environment   
      - name: Setup Java JDK
        uses: actions/setup-java@v3.4.1
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: '11'
          distribution: 'microsoft'

      - name: Verify Java
        run: 'java --version'

      - name: Download the Pipeline Scanner
        uses: wei/curl@master
        with:
          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      
      - name: Unzip the Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip
           
      - name: Get Present Directory
        run: pwd
    
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: .net-app
          # Destination path
          path: ${{github.workspace}}
          
      - name: Confirm Contents
        run: ls -la
      
      - name: Run Pipeline Scanner
        run: java -Dpipeline.debug=false -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "application.zip" -jf veracode-pipeline-results.json --fail_on_severity="Very High, High"

      - name: Upload analysis results
        uses: actions/upload-artifact@v2
        with:
            name: veracode-pipeline-results.json
            path: ${{github.workspace}}/veracode-pipeline-results.json

  sca-agent-analysis:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Veracode Dependency Scanning
      # You may pin to the exact commit or the version.
      # uses: veracode/veracode-sca@d8ce4a08eebf1a6c5e7759c1dc53c1172a3e7e64
      uses: veracode/veracode-sca@v1.09
      with:
        # Authorization token to query and create issues
        github_token: 0ee79fff-50f6-4056-abc7-acb71e92a0db
        quick: true
        # Show update advisor
        # update_advisor: # optional, default is false
        # A git URL to work with in case the scan is not for the current repository
        # url: # optional, default is 
        # The minimum CVSS value for vulnerability to be added as an issue
        # min-cvss-for-issue: # optional, default is 0
        # The maximum allowed cvss in found vulnerabilities to pass the step
        # fail-on-cvss: # optional, default is 10
        # An attribute to instruct the action to create an issue from found vulnerability or just simple text output
        # create-issues: # optional, default is false
        # A path within the repository where the build definition starts
        path: ${GITHUB_WORKSPACE}
        # Run the SRCCLR in debug mode
        # debug: # optional, default is false
        # Run the SRCCLR with the `--skip-collectors` options
        # skip-collectors: # optional, default is false
        # Run the SRCCLR with the `--allow-dirty` option
        # allow-dirty: # optional, default is false
        # Run the SRCCLR with the `--recursive` option
        # recursive: # optional, default is false
    
    
    
    
    
    
    
    
    
    
    
    
    
 
